// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Rnwood.Smtp4dev.Data;
using Rnwood.Smtp4dev.DbModel;

#nullable disable

namespace Rnwood.Smtp4dev.Migrations
{
    [DbContext(typeof(Smtp4devDbContext))]
    [Migration("20250429030907_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Rnwood.Smtp4dev.DbModel.Imapstate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Lastuid")
                        .HasColumnType("integer")
                        .HasColumnName("lastuid");

                    b.HasKey("Id")
                        .HasName("pk_imapstate");

                    b.ToTable("imapstate", (string)null);
                });

            modelBuilder.Entity("Rnwood.Smtp4dev.DbModel.Mailbox", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_mailbox");

                    b.ToTable("mailboxes", (string)null);
                });

            modelBuilder.Entity("Rnwood.Smtp4dev.DbModel.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Attachmentcount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("attachmentcount");

                    b.Property<byte[]>("Data")
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<string>("Deliveredto")
                        .HasColumnType("text")
                        .HasColumnName("deliveredto");

                    b.Property<bool?>("Eightbittransport")
                        .HasColumnType("boolean")
                        .HasColumnName("eightbittransport");

                    b.Property<string>("From")
                        .HasColumnType("text")
                        .HasColumnName("from");

                    b.Property<int>("Imapuid")
                        .HasColumnType("integer")
                        .HasColumnName("imapuid");

                    b.Property<bool>("Isunread")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isunread");

                    b.Property<Guid?>("Mailboxid")
                        .HasColumnType("uuid")
                        .HasColumnName("mailboxid");

                    b.Property<string>("Mimeparseerror")
                        .HasColumnType("text")
                        .HasColumnName("mimeparseerror");

                    b.Property<DateTime>("Receiveddate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("receiveddate");

                    b.Property<string>("Relayerror")
                        .HasColumnType("text")
                        .HasColumnName("relayerror");

                    b.Property<bool>("Secureconnection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("secureconnection");

                    b.Property<string>("Sessionencoding")
                        .HasColumnType("text")
                        .HasColumnName("sessionencoding");

                    b.Property<Guid?>("Sessionid")
                        .HasColumnType("uuid")
                        .HasColumnName("sessionid");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<string>("To")
                        .HasColumnType("text")
                        .HasColumnName("to");

                    b.HasKey("Id")
                        .HasName("messages_pkey");

                    b.HasIndex("Sessionid");

                    b.HasIndex(new[] { "Mailboxid" }, "ix_messages_mailboxid");

                    b.HasIndex(new[] { "Id" }, "pk_messages_id")
                        .IsUnique();

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("Rnwood.Smtp4dev.DbModel.Messagerelay", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("Messageid")
                        .HasColumnType("uuid")
                        .HasColumnName("messageid");

                    b.Property<DateTime>("Senddate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("senddate");

                    b.Property<string>("To")
                        .HasColumnType("text")
                        .HasColumnName("to");

                    b.HasKey("Id")
                        .HasName("pk_messagerelays");

                    b.HasIndex(new[] { "Messageid" }, "ix_messagerelays_messageid");

                    b.ToTable("messagerelays", (string)null);
                });

            modelBuilder.Entity("Rnwood.Smtp4dev.DbModel.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Clientaddress")
                        .HasColumnType("text")
                        .HasColumnName("clientaddress");

                    b.Property<string>("Clientname")
                        .HasColumnType("text")
                        .HasColumnName("clientname");

                    b.Property<DateTime?>("Enddate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("enddate");

                    b.Property<string>("Log")
                        .HasColumnType("text")
                        .HasColumnName("log");

                    b.Property<int>("Numberofmessages")
                        .HasColumnType("integer")
                        .HasColumnName("numberofmessages");

                    b.Property<string>("Sessionerror")
                        .HasColumnType("text")
                        .HasColumnName("sessionerror");

                    b.Property<int?>("Sessionerrortype")
                        .HasColumnType("integer")
                        .HasColumnName("sessionerrortype");

                    b.Property<DateTime>("Startdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("startdate");

                    b.HasKey("Id")
                        .HasName("pk_sessions");

                    b.ToTable("sessions", (string)null);
                });

            modelBuilder.Entity("Rnwood.Smtp4dev.DbModel.Message", b =>
                {
                    b.HasOne("Rnwood.Smtp4dev.DbModel.Mailbox", "Mailbox")
                        .WithMany("Messages")
                        .HasForeignKey("Mailboxid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_messages_mailboxes_mailboxid");

                    b.HasOne("Rnwood.Smtp4dev.DbModel.Session", "Session")
                        .WithMany("Messages")
                        .HasForeignKey("Sessionid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_messages_sessions_sessionid");

                    b.Navigation("Mailbox");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Rnwood.Smtp4dev.DbModel.Messagerelay", b =>
                {
                    b.HasOne("Rnwood.Smtp4dev.DbModel.Message", "Message")
                        .WithMany("Messagerelays")
                        .HasForeignKey("Messageid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messagerelays_messages_messageid");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Rnwood.Smtp4dev.DbModel.Mailbox", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Rnwood.Smtp4dev.DbModel.Message", b =>
                {
                    b.Navigation("Messagerelays");
                });

            modelBuilder.Entity("Rnwood.Smtp4dev.DbModel.Session", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
